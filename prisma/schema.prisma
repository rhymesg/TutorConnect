generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                    String            @id @default(cuid())
  email                 String            @unique
  password              String
  emailVerified         DateTime?
  verificationToken     String?
  name                  String
  region                NorwegianRegion
  postalCode            String?
  gender                Gender?
  birthYear             Int?
  profileImage          String?
  degree                String?
  certifications        String?
  bio                   String?
  privacyGender         PrivacySetting    @default(PUBLIC)
  privacyAge            PrivacySetting    @default(PUBLIC)
  privacyDocuments      PrivacySetting    @default(PUBLIC)
  privacyContact        PrivacySetting    @default(PUBLIC)
  privacyEducation      PrivacySetting    @default(PUBLIC)
  privacyLocation       PrivacySetting    @default(PUBLIC)
  privacyActivity       PrivacySetting    @default(PUBLIC)
  isActive              Boolean           @default(true)
  lastActive            DateTime?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  failedLoginAttempts   Int?              @default(0)
  lockedUntil           DateTime?
  privacyMemberSince    PrivacySetting    @default(PUBLIC)
  privacyPostalCode     PrivacySetting    @default(PUBLIC)
  privacyLastActive     PrivacySetting    @default(PUBLIC)
  education             String?
  privacyCertifications PrivacySetting    @default(PUBLIC)
  studentSessions       Int               @default(0)
  studentTeachers       Int               @default(0)
  teacherSessions       Int               @default(0)
  teacherStudents       Int               @default(0)
  privacyStats          PrivacySetting    @default(PUBLIC)
  // Email notification preferences
  emailNewChat          Boolean           @default(true)
  emailNewMessage       Boolean           @default(true)
  emailAppointmentConfirm Boolean         @default(true)
  emailAppointmentReminder Boolean       @default(true)
  emailAppointmentComplete Boolean       @default(true)
  lastEmailNotificationAt DateTime?
  chatParticipants      ChatParticipant[]
  teacherChats          Chat[]            @relation("TeacherChats")
  studentChats          Chat[]            @relation("StudentChats")
  reportedChats         ChatReport[]      @relation("ChatReportReporter")
  reviewedReports       ChatReport[]      @relation("ChatReportReviewer")
  documents             Document[]
  receivedInfoRequests  InfoRequest[]     @relation("InfoRequestReceiver")
  sentInfoRequests      InfoRequest[]     @relation("InfoRequestSender")
  sentMessages          Message[]
  posts                 Post[]
  sessions              UserSession[]

  @@index([region, isActive])
  @@index([email])
  @@index([lastActive])
  @@map("users")
}

model Post {
  id            String          @id @default(cuid())
  type          PostType
  subject       Subject
  ageGroups     AgeGroup[]
  title         String
  description   String
  availableDays String[]
  location      NorwegianRegion
  hourlyRate    Decimal?        @db.Decimal(8, 2)
  hourlyRateMin Decimal?        @db.Decimal(8, 2)
  hourlyRateMax Decimal?        @db.Decimal(8, 2)
  currency      String          @default("NOK")
  status        PostStatus      @default(AKTIV)
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  userId        String
  customSubject String?
  endTime       String
  postnummer    String?
  startTime     String
  chats         Chat[]
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([type, subject, location, status, isActive])
  @@index([userId, status, isActive])
  @@index([createdAt])
  @@index([location, subject])
  @@index([status, isActive])
  @@map("posts")
}

model Chat {
  id            String            @id @default(cuid())
  relatedPostId String?
  teacherId     String?           @map("teacher_id")
  studentId     String?           @map("student_id")
  isActive      Boolean           @default(true)
  newChatNotificationDone Boolean @default(false) @map("new_chat_notification_done")
  lastMessageAt DateTime?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  appointments  Appointment[]
  participants  ChatParticipant[]
  reports       ChatReport[]
  relatedPost   Post?             @relation(fields: [relatedPostId], references: [id])
  teacher       User?             @relation("TeacherChats", fields: [teacherId], references: [id])
  student       User?             @relation("StudentChats", fields: [studentId], references: [id])
  messages      Message[]

  @@index([relatedPostId])
  @@index([lastMessageAt])
  @@index([teacherId])
  @@index([studentId])
  @@map("chats")
}

model ChatParticipant {
  id          String    @id @default(cuid())
  chatId      String
  userId      String
  joinedAt    DateTime  @default(now())
  leftAt      DateTime?
  isActive    Boolean   @default(true)
  unreadCount Int       @default(0)
  lastReadAt  DateTime?
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([chatId, userId])
  @@index([userId, isActive])
  @@index([chatId, isActive])
  @@map("chat_participants")
}

model Message {
  id               String       @id @default(cuid())
  content          String
  content_search   String?
  type             MessageType?
  chatId           String
  senderId         String
  isEdited         Boolean      @default(false)
  editedAt         DateTime?
  sentAt           DateTime     @default(now())
  appointmentId    String?
  replyToMessageId String?
  appointment      Appointment? @relation(fields: [appointmentId], references: [id])
  chat             Chat         @relation(fields: [chatId], references: [id], onDelete: Cascade)
  replyTo          Message?     @relation("MessageReply", fields: [replyToMessageId], references: [id])
  replies          Message[]    @relation("MessageReply")
  sender           User         @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@index([chatId, sentAt])
  @@index([senderId])
  @@index([replyToMessageId])
  @@index([content_search])
  @@map("messages")
}

model Appointment {
  id                 String            @id @default(cuid())
  chatId             String
  dateTime           DateTime
  location           String
  specificLocation   String?
  duration           Int               @default(60)
  status             AppointmentStatus @default(PENDING)
  teacherReady       Boolean           @default(false)
  studentReady       Boolean           @default(false)
  bothCompleted      Boolean           @default(false)
  reminderTime       Int?
  notes              String?
  cancellationReason String?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  chat               Chat              @relation(fields: [chatId], references: [id], onDelete: Cascade)
  messages           Message[]

  @@index([chatId, status])
  @@index([dateTime, status])
  @@map("appointments")
}

model Document {
  id                 String             @id @default(cuid())
  userId             String
  documentType       DocumentType
  fileName           String
  fileUrl            String
  fileSize           Int?
  mimeType           String?
  documentContent    String?
  encryptionMetadata String?
  verificationStatus VerificationStatus @default(PENDING)
  verifiedAt         DateTime?
  verificationNotes  String?
  uploadedAt         DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  user               User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, documentType])
  @@index([verificationStatus])
  @@map("documents")
}

model InfoRequest {
  id              String    @id @default(cuid())
  senderId        String
  receiverId      String
  requestType     String
  message         String?
  status          String    @default("PENDING")
  responseMessage String?
  requestedAt     DateTime  @default(now())
  respondedAt     DateTime?
  receiver        User      @relation("InfoRequestReceiver", fields: [receiverId], references: [id], onDelete: Cascade)
  sender          User      @relation("InfoRequestSender", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId, requestType])
  @@index([receiverId, status])
  @@index([senderId])
  @@map("info_requests")
}

model ChatReport {
  id          String    @id @default(cuid())
  chatId      String
  reporterId  String
  reason      String
  description String?
  messageIds  String[]
  status      String    @default("PENDING")
  priority    String    @default("MEDIUM")
  reviewedBy  String?
  reviewNotes String?
  actionTaken String?
  createdAt   DateTime  @default(now())
  reviewedAt  DateTime?
  resolvedAt  DateTime?
  chat        Chat      @relation(fields: [chatId], references: [id], onDelete: Cascade)
  reporter    User      @relation("ChatReportReporter", fields: [reporterId], references: [id], onDelete: Cascade)
  reviewer    User?     @relation("ChatReportReviewer", fields: [reviewedBy], references: [id])

  @@index([chatId, status])
  @@index([reporterId])
  @@index([status, priority])
  @@index([createdAt])
  @@map("chat_reports")
}

model UserSession {
  id           String   @id @default(cuid())
  userId       String
  ipAddress    String
  userAgent    String
  createdAt    DateTime @default(now())
  lastActivity DateTime @default(now())
  requestCount Int      @default(1)
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, ipAddress])
  @@index([userId, lastActivity])
  @@index([ipAddress])
  @@map("user_sessions")
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

enum PrivacySetting {
  PUBLIC
  ON_REQUEST
  PRIVATE
}

enum PostType {
  TEACHER
  STUDENT
}

enum PostStatus {
  AKTIV   // Active - currently looking for teacher/student
  PAUSET  // Paused - temporarily stopped
}

enum Subject {
  math
  english
  korean
  norwegian
  science
  programming
  sports
  art
  other
  music
  childcare
}

enum AgeGroup {
  PRESCHOOL
  PRIMARY_LOWER
  PRIMARY_UPPER
  MIDDLE
  SECONDARY
  ADULTS
}

enum AppointmentStatus {
  PENDING              // Venter - waiting for response
  CONFIRMED            // Bekreftet - confirmed, future appointments
  WAITING_TO_COMPLETE  // Venter på fullføring - confirmed appointments that are past due
  COMPLETED            // Fullført - marked as completed by both parties
  CANCELLED            // Avbrutt - cancelled
}

enum DocumentType {
  PROFILE_IMAGE
  EDUCATION_CERTIFICATE
  ID_VERIFICATION
  TEACHING_CERTIFICATE
  OTHER_DOCUMENT
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum MessageType {
  TEXT
  APPOINTMENT_REQUEST
  APPOINTMENT_RESPONSE
  APPOINTMENT_COMPLETION_RESPONSE
  SYSTEM_MESSAGE
}

enum NorwegianRegion {
  OSLO
  BERGEN
  TRONDHEIM
  STAVANGER
  KRISTIANSAND
  FREDRIKSTAD
  SANDNES
  TROMSOE
  DRAMMEN
  ASKER
  BAERUM
  AKERSHUS
  OESTFOLD
  BUSKERUD
  VESTFOLD
  TELEMARK
  AUST_AGDER
  VEST_AGDER
  ROGALAND
  HORDALAND
  SOGN_OG_FJORDANE
  MOERE_OG_ROMSDAL
  SOER_TROENDELAG
  NORD_TROENDELAG
  NORDLAND
  TROMS
  FINNMARK
}
