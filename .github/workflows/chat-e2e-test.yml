# üí¨ Chat E2E Test Workflow
# 
# This workflow runs end-to-end tests for the chat system:
# - Login with test user account (tester@tutorconnect.no)
# - Navigate to "Mine samtaler" (chat list)
# - Verify chat list loads correctly
# - Click first chat and verify chat interface loads
# - Click second chat and verify chat interface loads
# - Uses Playwright with Chromium browser on production build

name: Chat E2E Test

on:
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: production

permissions:
  contents: read
  pull-requests: write

jobs:
  chat-test:
    name: Test Chat Flow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --include=dev
      
    - name: Setup environment
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> $GITHUB_ENV
        echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> $GITHUB_ENV
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        echo "TESTER_PASSWORD=${{ secrets.TESTER_PASSWORD }}" >> $GITHUB_ENV
        echo "ALLOW_TEST_SETUP=true" >> $GITHUB_ENV
        
    - name: Build application
      run: npm run build
      
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
      
    - name: Start application
      run: |
        npm run start &
        sleep 10
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000
      
    - name: Run chat E2E test
      run: |
        cat > playwright-chat.config.ts << 'EOF'
        import { defineConfig } from '@playwright/test';

        export default defineConfig({
          testDir: './tests/e2e',
          timeout: 30000,
          expect: { timeout: 10000 },
          fullyParallel: false,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: 1,
          reporter: 'html',
          use: {
            baseURL: 'http://localhost:3000',
            trace: 'on-first-retry',
            screenshot: 'only-on-failure',
          },
          projects: [
            {
              name: 'chromium',
              use: { browserName: 'chromium' },
            },
          ],
        });
        EOF
        
        mkdir -p tests/e2e
        cat > tests/e2e/chat.test.ts << 'EOF'
        import { test, expect } from '@playwright/test';

        test.describe('Chat Flow', () => {
          test.beforeEach(async ({ page }) => {
            // Login with existing test user
            await page.goto('/auth/login');
            await page.fill('input[type="email"]', 'tester@tutorconnect.no');
            await page.fill('input[type="password"]', process.env.TESTER_PASSWORD || '');
            
            let loginResponse;
            await Promise.all([
              page.waitForResponse(response => response.url().includes('/api/auth/login'), { timeout: 10000 }).then(res => { loginResponse = res; }),
              page.click('button[type="submit"]')
            ]);
            
            // Check login response
            if (loginResponse) {
              const status = loginResponse.status();
              if (status !== 200) {
                const responseData = await loginResponse.json().catch(() => ({}));
                throw new Error(`Login failed with status ${status}: ${JSON.stringify(responseData)}`);
              }
            }
            
            // Wait for login to complete
            await page.waitForTimeout(3000);
            
            // Verify login success
            const accessToken = await page.evaluate(() => localStorage.getItem('accessToken'));
            if (!accessToken) {
              throw new Error('Login failed - no tokens found');
            }
            
            console.log('‚úÖ Login successful for chat tests');
          });

          test('should navigate to chat list and load chats properly', async ({ page }) => {
            // Navigate to home page first
            await page.goto('/');
            
            // Look for "Mine samtaler" button and click it
            const mineSamtalerButton = page.locator('text=Mine samtaler').or(
              page.locator('a[href="/chat"]')
            ).or(
              page.locator('a:has-text("samtaler")')
            ).or(
              page.locator('button:has-text("samtaler")')
            ).first();
            
            await expect(mineSamtalerButton).toBeVisible({ timeout: 10000 });
            console.log('‚úÖ Found "Mine samtaler" button');
            
            await mineSamtalerButton.click();
            
            // Wait for navigation to chat page
            await page.waitForURL('**/chat**', { timeout: 10000 });
            console.log('‚úÖ Navigated to chat page');
            
            // Wait for chat list to load - give more time for data fetching
            console.log('‚è≥ Waiting for chat data to load...');
            await page.waitForTimeout(5000);
            
            // Wait for any loading indicators to disappear
            const loadingSpinner = page.locator('.animate-spin, [data-testid="loading"]');
            if (await loadingSpinner.isVisible({ timeout: 2000 })) {
              console.log('‚è≥ Waiting for loading spinner to disappear...');
              await loadingSpinner.waitFor({ state: 'hidden', timeout: 10000 });
            }
            
            // Check if chat list loads (either shows chats or empty state)
            const chatListContainer = page.locator('[data-testid="chat-list"]').or(
              page.locator('.chat-list')
            ).or(
              page.locator('main').or(page.locator('.container'))
            );
            
            await expect(chatListContainer).toBeVisible({ timeout: 10000 });
            console.log('‚úÖ Chat list container is visible');
            
            // Check for chat items using the exact ChatRoomList structure
            // The chat items are buttons inside a div with classes "divide-y divide-gray-100"
            const chatListDiv = page.locator('div.divide-y.divide-gray-100');
            const chatItems = chatListDiv.locator('button.w-full.p-4.text-left');
            let hasChatItems = await chatItems.count();
            
            console.log(`üîç Primary selector found: ${hasChatItems} chat items`);
            
            // If no chats found with primary selector, try broader selectors
            if (hasChatItems === 0) {
              console.log('üîç No chats found with primary selector, trying alternatives...');
              
              // Try just the button selector without the parent div
              const altChatItems1 = page.locator('button.w-full.p-4.text-left');
              hasChatItems = await altChatItems1.count();
              console.log(`üîç Alternative 1 (button.w-full.p-4.text-left): ${hasChatItems} items`);
              
              if (hasChatItems === 0) {
                // Try any button with w-full and p-4 classes
                const altChatItems2 = page.locator('button.w-full.p-4');
                hasChatItems = await altChatItems2.count();
                console.log(`üîç Alternative 2 (button.w-full.p-4): ${hasChatItems} items`);
              }
              
              if (hasChatItems === 0) {
                // Try buttons that contain avatar images (w-12 h-12 class)
                const altChatItems3 = page.locator('button:has(.w-12.h-12)');
                hasChatItems = await altChatItems3.count();
                console.log(`üîç Alternative 3 (button:has(.w-12.h-12)): ${hasChatItems} items`);
              }
              
              // Debug what's actually on the page
              const allButtons = await page.locator('button').count();
              const allButtonTexts = await page.locator('button').allTextContents();
              console.log(`üîç Total buttons on page: ${allButtons}`);
              console.log(`üîç Button texts:`, allButtonTexts.slice(0, 10)); // Show first 10 buttons
              
              // Check if chat container exists at all
              const hasChatContainer = await chatListDiv.isVisible();
              console.log(`üîç Chat container (div.divide-y.divide-gray-100) exists: ${hasChatContainer}`);
              
              // Look for any div that might contain chats
              const anyDivideY = await page.locator('div.divide-y').count();
              console.log(`üîç Any div.divide-y elements: ${anyDivideY}`);
              
              // Check what's inside the chat container div if it exists
              if (hasChatContainer) {
                const containerHTML = await chatListDiv.innerHTML();
                console.log('üîç Chat container HTML (first 500 chars):', containerHTML.substring(0, 500));
                
                const childElements = await chatListDiv.locator('*').count();
                console.log(`üîç Child elements in chat container: ${childElements}`);
                
                const directButtons = await chatListDiv.locator('> button').count();
                console.log(`üîç Direct button children: ${directButtons}`);
              }
            }
            
            // Look for actual empty state components with proper selectors
            const noChatsText = await page.locator('h3:has-text("No chats"), h3:has-text("Ingen samtaler")').count();
            const exploreButton = await page.locator('text=Utforsk innlegg, text=Explore posts').count();
            const emptyStateIcon = await page.locator('.text-blue-600').count(); // MessageCircle icon
            const hasEmptyMessage = noChatsText + exploreButton + emptyStateIcon;
            
            console.log(`Debug: Found ${hasChatItems} chat items, ${hasEmptyMessage} empty state elements`);
            
            if (hasChatItems >= 2) {
              console.log(`‚úÖ Chat list loaded successfully with ${hasChatItems} chats`);
              
              // Verify we have at least 2 chats as required
              expect(hasChatItems).toBeGreaterThanOrEqual(2);
              
              // Use the correct selector based on what we found
              let actualChatItems = chatItems;
              if (await chatItems.count() === 0) {
                // Use the alternative selector that worked
                actualChatItems = page.locator('button.w-full.p-4.text-left');
                if (await actualChatItems.count() === 0) {
                  actualChatItems = page.locator('button.w-full.p-4');
                  if (await actualChatItems.count() === 0) {
                    actualChatItems = page.locator('button:has(.w-12.h-12)');
                  }
                }
              }
              
              // Test clicking first chat
              const firstChat = actualChatItems.first();
              await expect(firstChat).toBeVisible({ timeout: 5000 });
              console.log('‚úÖ First chat item is visible');
              
              await firstChat.click();
              
              // Wait for chat interface to load
              await page.waitForTimeout(3000);
              
              // Verify we're now in a specific chat
              expect(page.url()).toMatch(/\/chat\/.+/);
              console.log('‚úÖ First chat opened successfully');
              
              // Check for message composer or chat interface elements
              const messageComposer = await page.locator('textarea, input[type="text"]').isVisible();
              const messageArea = await page.locator('div.flex-1.overflow-y-auto').isVisible();
              
              expect(messageComposer || messageArea).toBeTruthy();
              console.log('‚úÖ Chat interface loaded for first chat');
              
              // Go back to chat list
              await page.goBack();
              await page.waitForTimeout(2000);
              
              // Test that at least one chat is available and verify second chat functionality
              const chatCount = hasChatItems;
              
              // Assert that at least one chat exists
              expect(chatCount).toBeGreaterThanOrEqual(1);
              console.log(`‚úÖ Found ${chatCount} chat(s) available`);
              
              // Test second chat if multiple chats exist
              if (chatCount > 1) {
                const secondChat = actualChatItems.nth(1);
                await expect(secondChat).toBeVisible({ timeout: 5000 });
                console.log('‚úÖ Second chat item is visible');
                
                await secondChat.click();
                
                // Wait for chat interface to load
                await page.waitForTimeout(3000);
                
                // Verify we're now in a different chat
                expect(page.url()).toMatch(/\/chat\/.+/);
                console.log('‚úÖ Second chat opened successfully');
                
                // Check for chat interface elements
                const messageComposer2 = await page.locator('textarea, input[type="text"]').isVisible();
                const messageArea2 = await page.locator('div.flex-1.overflow-y-auto').isVisible();
                expect(messageComposer2 || messageArea2).toBeTruthy();
                console.log('‚úÖ Chat interface loaded for second chat');
              } else {
                console.log('‚ùå Only one chat available - expected at least 2 chats');
                throw new Error(`Test failed: Expected at least 2 chats but found only ${chatCount} chat. Tester account should have multiple chat conversations.`);
              }
              
            } else if (hasChatItems === 1) {
              console.log('‚ÑπÔ∏è Found only 1 chat - testing single chat functionality');
              
              // Test the single available chat
              const singleChat = chatItems.first();
              await expect(singleChat).toBeVisible({ timeout: 5000 });
              await singleChat.click();
              await page.waitForTimeout(3000);
              
              expect(page.url()).toMatch(/\/chat\/.+/);
              const messageComposer = await page.locator('textarea, input[type="text"]').isVisible();
              const messageArea = await page.locator('div.flex-1.overflow-y-auto').isVisible();
              expect(messageComposer || messageArea).toBeTruthy();
              console.log('‚úÖ Single chat functionality verified');
              
            } else if (hasEmptyMessage > 0) {
              console.log('‚ÑπÔ∏è Chat list shows empty state - no chats available for tester account');
              
              // Verify empty state is working correctly
              const exploreBtn = await page.locator('button:has-text("Utforsk innlegg"), button:has-text("Explore Posts")').isVisible();
              if (exploreBtn) {
                console.log('‚úÖ Empty state with explore button is working correctly');
              } else {
                console.log('‚úÖ Empty state is displayed correctly');
              }
              
              console.log('‚úÖ Empty state functionality verified');
            } else {
              // Debug what's actually on the page
              const pageContent = await page.content();
              console.log('Debug: Page title:', await page.title());
              console.log('Debug: Current URL:', page.url());
              
              // Look for any visible text on the page
              const allText = await page.locator('body').textContent();
              console.log('Debug: Page contains text:', allText ? allText.substring(0, 200) + '...' : 'No text found');
              
              // Check if there are any loading states
              const loadingSpinner = await page.locator('text=Loading, .animate-spin').count();
              console.log('Debug: Loading indicators found:', loadingSpinner);
              
              // This might be a loading issue, so let's wait a bit longer
              await page.waitForTimeout(5000);
              
              // Re-check after waiting
              const retryChats = await page.locator('button.w-full.p-4.text-left').count();
              const retryEmpty = await page.locator('h3:has-text("No chats"), h3:has-text("Ingen samtaler"), text=Utforsk innlegg, text=Explore posts').count();
              
              if (retryChats > 0 || retryEmpty > 0) {
                console.log('‚úÖ Chat list loaded after additional wait');
              } else {
                throw new Error(`Chat list failed to load - found ${retryChats} chats and ${retryEmpty} empty state elements after retry`);
              }
            }
            
            console.log('‚úÖ Chat E2E test completed successfully');
          });
        });
        EOF
        
        npx playwright test --config=playwright-chat.config.ts
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: chat-playwright-report
        path: playwright-report/
        retention-days: 30