name: Continuous Integration

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main, develop ]

env:
  NODE_ENV: test
  # Test environment variables
  NEXT_PUBLIC_SUPABASE_URL: https://test.supabase.co
  NEXT_PUBLIC_SUPABASE_ANON_KEY: test-key-for-github-actions
  SUPABASE_SERVICE_ROLE_KEY: test-service-key-for-github-actions
  JWT_ACCESS_SECRET: test-access-secret-that-is-at-least-32-characters-long-for-github-actions
  JWT_REFRESH_SECRET: test-refresh-secret-that-is-at-least-32-characters-long-and-different-for-github-actions

jobs:
  # Security and dependency check
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for outdated packages
        run: npm outdated || true

  # Code quality checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run TypeScript compiler
        run: npm run type-check

      - name: Check formatting with Prettier
        run: npx prettier --check "src/**/*.{js,jsx,ts,tsx,json,css,md}"

  # Test suite
  test:
    name: Test Suite (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm run test:unit -- --coverage --watchAll=false

      - name: Run Norwegian validation tests
        run: npm test -- --testPathPattern="norwegian-validation.test.ts" --watchAll=false

      - name: Run error handling tests
        run: npm test -- --testPathPattern="errors.test.ts" --watchAll=false

      - name: Run auth schema tests
        run: npm test -- --testPathPattern="auth.test.ts" --watchAll=false

      - name: Run all tests with coverage
        run: npm run test -- --coverage --watchAll=false --ci --maxWorkers=2

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

  # Build test
  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: [security, quality]
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npm run db:generate

      - name: Build application
        run: npm run build
        env:
          NODE_ENV: production

      - name: Check bundle size
        run: npm run analyze || true

  # E2E tests (if needed later)
  e2e:
    name: E2E Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npm run test:e2e || echo "E2E tests not configured yet"

  # Notify on completion
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [security, quality, test, build]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.security.result == 'success' && needs.quality.result == 'success' && needs.test.result == 'success' && needs.build.result == 'success'
        run: echo "✅ All CI checks passed successfully!"
        
      - name: Notify failure
        if: needs.security.result == 'failure' || needs.quality.result == 'failure' || needs.test.result == 'failure' || needs.build.result == 'failure'
        run: |
          echo "❌ Some CI checks failed:"
          echo "Security: ${{ needs.security.result }}"
          echo "Quality: ${{ needs.quality.result }}"
          echo "Tests: ${{ needs.test.result }}"
          echo "Build: ${{ needs.build.result }}"
          exit 1