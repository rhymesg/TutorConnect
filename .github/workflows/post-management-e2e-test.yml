# 📝 Post Management E2E Test Workflow
# 
# This workflow runs end-to-end tests for post management functionality:
# - "Mine annonser" page navigation and post cards display
# - Post detail view navigation from post cards
# - Post edit page access and functionality
# - Post status toggle (Sett Aktiv/Sett Pauset) with state verification
# - Post update workflow with "Lagre endringer" button and redirect verification
# - Edit button functionality from post detail view
# - Requires authenticated user session with existing posts

name: Post Management E2E Test

on:
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: production
  TESTER_EMAIL: ${{ secrets.TESTER_EMAIL }}
  TESTER_PASSWORD: ${{ secrets.TESTER_PASSWORD }}

permissions:
  contents: read
  pull-requests: write

jobs:
  post-management-test:
    name: Test Post Management Flow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --include=dev
      
    - name: Setup environment
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> $GITHUB_ENV
        echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> $GITHUB_ENV
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        echo "ALLOW_TEST_SETUP=true" >> $GITHUB_ENV
        
    - name: Build application
      run: npm run build
      
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
      
    - name: Start application
      run: |
        npm run start &
        sleep 10
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000
      
    - name: Run post management E2E test
      run: |
        cat > playwright-post-management.config.ts << 'EOF'
        import { defineConfig } from '@playwright/test';

        export default defineConfig({
          testDir: './tests/e2e',
          timeout: 110000,
          expect: { timeout: 8000 },
          fullyParallel: false,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: 1,
          reporter: 'html',
          use: {
            baseURL: 'http://localhost:3000',
            trace: 'on-first-retry',
            screenshot: 'only-on-failure',
          },
          projects: [
            {
              name: 'chromium',
              use: { browserName: 'chromium' },
            },
          ],
        });
        EOF
        
        mkdir -p tests/e2e
        cat > tests/e2e/post-management.test.ts << 'EOF'
        import { test, expect } from '@playwright/test';

        test.describe('Post Management Flow', () => {
          test.beforeEach(async ({ page }) => {
            // Login with test user
            await page.goto('/auth/login');
            await page.fill('input[type="email"]', process.env.TESTER_EMAIL || '');
            await page.fill('input[type="password"]', process.env.TESTER_PASSWORD || '');
            
            let loginResponse;
            await Promise.all([
              page.waitForResponse(response => response.url().includes('/api/auth/login'), { timeout: 10000 }).then(res => { loginResponse = res; }),
              page.click('button[type="submit"]')
            ]);
            
            // Check login response
            if (loginResponse) {
              const responseData = await loginResponse.json().catch(() => ({}));
              console.log('Login response status:', loginResponse.status());
              console.log('Login response data:', JSON.stringify(responseData, null, 2));
              
              // Verify login was successful
              expect(loginResponse.status()).toBe(200);
            }
            
            await page.waitForTimeout(3000);
            
            // Navigate to home page
            await page.goto('/');
            await page.waitForTimeout(2000);
          });

          test('should complete full post management workflow', async ({ page }) => {
            const currentUrl = await page.url();
            expect(currentUrl).toContain('localhost:3000');

            console.log('✅ Starting post management workflow test');

            // Test 1: Navigate to "Mine annonser" page
            console.log('🧪 Test 1: Navigate to Mine annonser page');
            
            // Wait for UI to update after login (similar to login test)
            await page.waitForTimeout(3000);
            
            // Check if login state is reflected in UI (like chat test does)
            const accessToken = await page.evaluate(() => localStorage.getItem('accessToken'));
            const user = await page.evaluate(() => localStorage.getItem('user'));
            console.log('AccessToken exists:', !!accessToken);
            console.log('User data exists:', !!user);
            
            if (!accessToken || !user) {
              throw new Error('Login failed - no tokens found in localStorage');
            }
            
            // Wait for user menu to confirm login state is updated
            const userMenuButton = page.locator('button[aria-label="Brukermeny"]');
            await expect(userMenuButton).toBeVisible({ timeout: 10000 });
            console.log('✅ User menu button visible after login');
            
            // Navigate directly to Mine annonser page via URL (simpler than finding navigation buttons)
            console.log('📱 Navigating directly to Mine annonser page');
            await page.goto('/profile/posts');
            await page.waitForTimeout(2000);
            
            // Verify we're on the correct page
            await expect(page).toHaveURL('/profile/posts');
            await expect(page.locator('h1:has-text("Mine annonser")')).toBeVisible({ timeout: 10000 });
            console.log('✅ Successfully navigated to Mine annonser page');

            // Verify we successfully reached the page
            const currentPageUrl = await page.url();
            expect(currentPageUrl).toContain('/profile/posts');

            // Test 2: Check for post cards and click first one
            console.log('🧪 Test 2: Click first post card');
            
            await page.waitForTimeout(3000); // Wait for posts to load
            
            // Look for actual post cards, exclude "new post" button, edit links, and search pages
            const postCards = page.locator('a[href^="/posts/"]:not([href*="/edit"]):not([href="/posts/new"]):not([href="/posts/teachers"]):not([href="/posts/students"])');
            const postCardCount = await postCards.count();
            
            expect(postCardCount).toBeGreaterThan(0);
            console.log(`✅ Found ${postCardCount} post cards`);
              
            const firstPostCard = postCards.first();
            const postHref = await firstPostCard.getAttribute('href');
            console.log(`🔗 First post URL: ${postHref}`);
            
            // Verify it's a real post ID (alphanumeric string, not search pages)
            expect(postHref).not.toBe('/posts/new');
            expect(postHref).not.toBe('/posts/teachers');
            expect(postHref).not.toBe('/posts/students');
            expect(postHref).toMatch(/^\/posts\/[a-zA-Z0-9]+$/);
            
            await firstPostCard.click();
            await page.waitForTimeout(3000);
            
            // Verify we're on post detail page
            const detailUrl = await page.url();
            expect(detailUrl).toMatch(/\/posts\/[^\/]+$/);
            expect(detailUrl).not.toContain('/edit');
            console.log('✅ Successfully navigated to post detail page');
                
            // Store the post ID for later use
            const postId = detailUrl.split('/posts/')[1];
            console.log(`📝 Post ID: ${postId}`);
            
            // Test 3: Go back to Mine annonser
            console.log('🧪 Test 3: Return to Mine annonser page');
            await page.goto('/profile/posts');
            await page.waitForTimeout(3000);
            
            // Test 4: Click edit button on first post
            console.log('🧪 Test 4: Click edit button on first post');
            
            const editButton = page.locator('a[href*="/edit"]').first();
            await expect(editButton).toBeVisible({ timeout: 5000 });
            await editButton.click();
            await page.waitForTimeout(3000);
            
            const editUrl = await page.url();
            expect(editUrl).toContain('/edit');
            console.log('✅ Successfully navigated to edit page');
            
                    
            // Test 5: Test status toggle buttons
            console.log('🧪 Test 5: Test status toggle functionality');
            
            // Define helper selectors for both Norwegian and English variants
            const activeButtonTexts = ['Set active', 'Set Aktiv', 'Sett aktiv'];
            const pausedButtonTexts = ['Set paused', 'Set Pauset', 'Sett på pause'];

            const buildButtonLocator = (texts: string[]) =>
              page.locator(texts.map((text) => `button:has-text("${text}")`).join(', ')).first();

            const findStatusButton = async () => {
              const activeButton = buildButtonLocator(activeButtonTexts);
              if (await activeButton.isVisible({ timeout: 1000 }).catch(() => false)) {
                return { button: activeButton, state: 'active' as const };
              }

              const pausedButton = buildButtonLocator(pausedButtonTexts);
              if (await pausedButton.isVisible({ timeout: 1000 }).catch(() => false)) {
                return { button: pausedButton, state: 'paused' as const };
              }

              return null;
            };

            const logAllButtons = async (label: string) => {
              const contents = await page.locator('button').allTextContents();
              console.log(`${label}:`, contents);
              return contents;
            };
            
            await page.waitForTimeout(2000);
            await logAllButtons('🔍 All buttons on page at start');

            const initialState = await findStatusButton();
            if (!initialState) {
              const buttons = await logAllButtons('🔍 Buttons when status toggle missing');
              throw new Error('Status toggle button not found. Available buttons: ' + buttons.join(', '));
            }

            const initialButtonText = (await initialState.button.textContent())?.trim() || initialState.state;
            console.log(`✅ Found status button: ${initialButtonText}`);

            // Toggle once
            await initialState.button.click();
            console.log(`🔄 Clicked ${initialButtonText} button, waiting for status change...`);
            await page.waitForTimeout(4000);

            const firstToggleState = await findStatusButton();
            await logAllButtons('🔍 All buttons after first toggle');

            if (!firstToggleState || firstToggleState.state === initialState.state) {
              throw new Error('Status toggle did not change state as expected.');
            }

            const firstToggleText = (await firstToggleState.button.textContent())?.trim() || firstToggleState.state;
            console.log(`✅ Status toggled successfully: ${initialButtonText} → ${firstToggleText}`);

            // Toggle back to original state
            await firstToggleState.button.click();
            console.log(`🔄 Clicking ${firstToggleText} button to toggle back...`);
            await page.waitForTimeout(4000);

            const finalState = await findStatusButton();
            if (!finalState) {
              const buttons = await logAllButtons('🔍 Buttons after attempting second toggle');
              throw new Error('Unable to locate status button after second toggle. Buttons: ' + buttons.join(', '));
            }

            const finalButtonText = (await finalState.button.textContent())?.trim() || finalState.state;
            console.log(`✅ Status toggle completed. Final button: ${finalButtonText}`);
            
            // Click "Lagre endringer" button and verify redirect to post detail page
            console.log('🔄 Clicking Lagre endringer button...');
            const saveButton = page.locator('button:has-text("Lagre endringer")');
            await expect(saveButton).toBeVisible({ timeout: 5000 });
            
            // Wait for the URL to change after clicking save button
            const expectedDetailUrl = `/posts/${postId}`;
            await Promise.all([
              page.waitForURL(`**${expectedDetailUrl}`, { timeout: 10000 }),
              saveButton.click()
            ]);
            
            // Verify redirect to post detail page using the stored post ID
            const redirectUrl = await page.url();
            expect(redirectUrl).toContain(expectedDetailUrl);
            console.log(`✅ Successfully redirected to post detail page: ${expectedDetailUrl}`);
            
            // Test 6: Already on post detail page, verify save operation worked
            console.log('🧪 Test 6: Verify save operation and post detail page');
            
            // Verify we're on the correct post detail page
            expect(page.url()).toMatch(/\/posts\/[^\/]+$/);
            expect(page.url()).not.toContain('/edit');
            console.log('✅ Confirmed on post detail page after save operation');
            
            // Test 7: Click Rediger button from post detail page to go to edit page
            console.log('🧪 Test 7: Click Rediger button to navigate to edit page');
            
            // Check that "Rediger" button exists and click it
            const redigerButton = page.locator('button:has-text("Rediger"), a:has-text("Rediger")');
            await expect(redigerButton).toBeVisible({ timeout: 5000 });
            console.log('✅ Rediger button found on post detail page');
            
            // Click Rediger button and wait for navigation to edit page
            await Promise.all([
              page.waitForURL(/\/posts\/[^\/]+\/edit$/, { timeout: 10000 }),
              redigerButton.click()
            ]);
            
            // Verify we're on the edit page
            const editPageUrl = await page.url();
            expect(editPageUrl).toContain('/edit');
            expect(editPageUrl).toMatch(/\/posts\/[^\/]+\/edit$/);
            console.log('✅ Successfully navigated to edit page via Rediger button');

            console.log('✅ Post management workflow test completed');
          });
        });
        EOF
        
        npx playwright test --config=playwright-post-management.config.ts
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-post-management-report
        path: playwright-report/
        retention-days: 30
