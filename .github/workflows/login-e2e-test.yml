# 🔐 Login E2E Test Workflow
# 
# This workflow runs end-to-end tests for the authentication system:
# - Complete login flow testing with test user account (tester@tutorconnect.no)
# - UI state validation after login (header buttons change from login/register to user menu)
# - Local storage token verification and management
# - Logout functionality testing and state cleanup
# - User menu dropdown interaction testing
# - Authentication error handling for server/database issues
# - Uses Playwright with Chromium browser on production build

name: Login E2E Test

on:
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: production
  TESTER_EMAIL: ${{ secrets.TESTER_EMAIL }}
  TESTER_PASSWORD: ${{ secrets.TESTER_PASSWORD }}

permissions:
  contents: read
  pull-requests: write

jobs:
  login-test:
    name: Test Login Flow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --include=dev
      
    - name: Setup environment
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> $GITHUB_ENV
        echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> $GITHUB_ENV
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        echo "ALLOW_TEST_SETUP=true" >> $GITHUB_ENV
        
    - name: Build application
      run: npm run build
      
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
      
    - name: Start application
      run: |
        npm run start &
        sleep 10
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000
      
    - name: Run login E2E test
      run: |
        cat > playwright-login.config.ts << 'EOF'
        import { defineConfig } from '@playwright/test';

        export default defineConfig({
          testDir: './tests/e2e',
          timeout: 60000,
          expect: { timeout: 5000 },
          fullyParallel: false,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: 1,
          reporter: 'html',
          use: {
            baseURL: 'http://localhost:3000',
            trace: 'on-first-retry',
            screenshot: 'only-on-failure',
          },
          projects: [
            {
              name: 'chromium',
              use: { browserName: 'chromium' },
            },
          ],
        });
        EOF
        
        mkdir -p tests/e2e
        cat > tests/e2e/login.test.ts << 'EOF'
        import { test, expect } from '@playwright/test';

        test.describe('Login Flow', () => {
          test('should login successfully and update header state', async ({ page }) => {
            // First visit home page to check initial header state
            await page.goto('/');
            
            // Check that login/register buttons are visible when not authenticated
            await expect(page.locator('a:has-text("Logg inn")')).toBeVisible();
            await expect(page.locator('a:has-text("Registrer deg")')).toBeVisible();
            
            // Navigate to login page
            await page.goto('/auth/login');
            
            // Check login form is present
            await expect(page.locator('h2:has-text("Logg inn")')).toBeVisible();
            await expect(page.locator('input[type="email"]')).toBeVisible();
            await expect(page.locator('input[type="password"]')).toBeVisible();
            
            // Fill login form
            await page.fill('input[type="email"]', process.env.TESTER_EMAIL || '');
            await page.fill('input[type="password"]', process.env.TESTER_PASSWORD || '');
            
            // Click login button and wait for any response
            let loginResponse;
            await Promise.all([
              page.waitForResponse(response => response.url().includes('/api/auth/login'), { timeout: 10000 }).then(res => { loginResponse = res; }),
              page.click('button[type="submit"]')
            ]);
            
            // Check login response
            if (loginResponse) {
              const responseData = await loginResponse.json().catch(() => ({}));
              console.log('Login response status:', loginResponse.status());
              console.log('Login response data:', JSON.stringify(responseData, null, 2));
              
              // Verify login was successful
              expect(loginResponse.status()).toBe(200);
            }
            
            // Wait a bit for any redirects or UI updates
            await page.waitForTimeout(5000);
            
            // Check localStorage to see if tokens were set
            const accessToken = await page.evaluate(() => localStorage.getItem('accessToken'));
            const user = await page.evaluate(() => localStorage.getItem('user'));
            console.log('AccessToken exists:', !!accessToken);
            console.log('User data exists:', !!user);
            
            // Navigate to home page to check header state after login
            await page.goto('/');
            
            // Wait for header to update and React to hydrate
            await page.waitForTimeout(3000);
            
            // Check current page HTML to debug
            const pageContent = await page.content();
            const hasLoginButton = pageContent.includes('Logg inn');
            const hasUserMenu = pageContent.includes('Brukermeny') || pageContent.includes('UserCircleIcon');
            console.log('Page has login button:', hasLoginButton);
            console.log('Page has user menu:', hasUserMenu);
            
            // Verify login was successful
            if (!accessToken || !user) {
              throw new Error('Login failed - no tokens found in localStorage');
            }
            
            console.log('✅ Login successful (verified by tokens)');
            
            // Now test the main feature: UI state should update automatically
            // Check that login/register buttons are gone (this is the key test!)
            await expect(page.locator('a:has-text("Logg inn")')).not.toBeVisible({ timeout: 10000 });
            await expect(page.locator('a:has-text("Registrer deg")')).not.toBeVisible({ timeout: 5000 });
            
            console.log('✅ Login/Register buttons hidden after login');
            
            // Check that user menu is now visible
            const userMenuButton = page.locator('button[aria-label="Brukermeny"]');
            await expect(userMenuButton).toBeVisible({ timeout: 5000 });
            
            console.log('✅ User menu button visible after login');
            
            // Click user menu to open dropdown
            await userMenuButton.click();
            
            // Check that "Min side" and "Logg ut" options are visible in dropdown
            await expect(page.locator('a:has-text("Min side")')).toBeVisible({ timeout: 3000 });
            await expect(page.locator('button:has-text("Logg ut")')).toBeVisible({ timeout: 3000 });
            
            console.log('✅ User menu dropdown working correctly');
            
            // Test logout functionality
            const logoutButton = page.locator('button:has-text("Logg ut")');
            await logoutButton.click();
            
            // Wait for logout to complete and any redirects
            await page.waitForTimeout(3000);
            
            // Check that we're redirected to home page (logout should redirect to /)
            await expect(page).toHaveURL('/');
            
            // Most important: Check that login/register buttons are visible again after logout
            await expect(page.locator('a:has-text("Logg inn")')).toBeVisible({ timeout: 10000 });
            await expect(page.locator('a:has-text("Registrer deg")')).toBeVisible({ timeout: 5000 });
            
            // Check that user menu button is no longer visible
            await expect(page.locator('button[aria-label="Brukermeny"]')).not.toBeVisible({ timeout: 5000 });
            
            // Verify tokens are cleared
            const tokenAfterLogout = await page.evaluate(() => localStorage.getItem('accessToken'));
            if (tokenAfterLogout) {
              throw new Error('Tokens still present after logout');
            }
            
            console.log('✅ Logout and header state test passed');
            console.log('✅ Complete authentication flow test passed');
          });
        });
        EOF
        
        npx playwright test --config=playwright-login.config.ts
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-report
        path: playwright-report/
        retention-days: 30