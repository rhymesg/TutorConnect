name: Unit Tests

on:
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment variables
      run: |
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=test-key" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=test-service-key" >> $GITHUB_ENV
        echo "JWT_ACCESS_SECRET=test-access-secret-that-is-at-least-32-characters-long" >> $GITHUB_ENV
        echo "JWT_REFRESH_SECRET=test-refresh-secret-that-is-at-least-32-characters-long-and-different" >> $GITHUB_ENV
      
    - name: Run unit tests with coverage
      run: npm test -- --passWithNoTests --verbose --coverage
      
    - name: Generate coverage report
      run: |
        # Get current coverage metrics
        CURRENT_STMTS=$(cat coverage/coverage-summary.json | jq -r '.total.statements.pct // 0')
        CURRENT_BRANCHES=$(cat coverage/coverage-summary.json | jq -r '.total.branches.pct // 0')
        CURRENT_FUNCS=$(cat coverage/coverage-summary.json | jq -r '.total.functions.pct // 0')
        CURRENT_LINES=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
        
        # Get changed files coverage
        BASE_SHA="${{ github.event.pull_request.base.sha }}"
        HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        
        # Fallback to main branch comparison if PR context is not available
        if [ -z "$BASE_SHA" ] || [ -z "$HEAD_SHA" ]; then
          BASE_SHA="origin/main"
          HEAD_SHA="HEAD"
        fi
        
        echo "Debug: BASE_SHA=$BASE_SHA, HEAD_SHA=$HEAD_SHA"
        
        # Try to get changed files, with fallback if git diff fails
        CHANGED_FILES=$(git diff --name-only ${BASE_SHA}..${HEAD_SHA} 2>/dev/null | grep -E '\.(ts|tsx|js|jsx)$' | grep '^src/' | tr '\n' ',' | sed 's/,$//' || echo "")
        
        # If git diff failed, try alternative approach
        if [ -z "$CHANGED_FILES" ]; then
          echo "Git diff failed, trying alternative approach..."
          # Get all source files in current branch (fallback)
          CHANGED_FILES=$(find src -name "*.ts" -o -name "*.tsx" -o -name "*.js" -o -name "*.jsx" | head -10 | tr '\n' ',' | sed 's/,$//')
        fi
        
        echo "Debug: Changed files: $CHANGED_FILES"
        
        if [ -n "$CHANGED_FILES" ]; then
          # Calculate coverage for changed files only
          CHANGED_STMTS=$(cat coverage/coverage-summary.json | jq -r --arg files "$CHANGED_FILES" '
            [$files | split(",")[] | select(. != "")] as $fileList |
            [.[] | select(.file as $f | $fileList | any(. == $f)) | .statements.pct] as $pcts |
            if ($pcts | length) > 0 then ($pcts | add / length) else 0 end
          ')
          CHANGED_BRANCHES=$(cat coverage/coverage-summary.json | jq -r --arg files "$CHANGED_FILES" '
            [$files | split(",")[] | select(. != "")] as $fileList |
            [.[] | select(.file as $f | $fileList | any(. == $f)) | .branches.pct] as $pcts |
            if ($pcts | length) > 0 then ($pcts | add / length) else 0 end
          ')
          CHANGED_FUNCS=$(cat coverage/coverage-summary.json | jq -r --arg files "$CHANGED_FILES" '
            [$files | split(",")[] | select(. != "")] as $fileList |
            [.[] | select(.file as $f | $fileList | any(. == $f)) | .functions.pct] as $pcts |
            if ($pcts | length) > 0 then ($pcts | add / length) else 0 end
          ')
          CHANGED_LINES=$(cat coverage/coverage-summary.json | jq -r --arg files "$CHANGED_FILES" '
            [$files | split(",")[] | select(. != "")] as $fileList |
            [.[] | select(.file as $f | $fileList | any(. == $f)) | .lines.pct] as $pcts |
            if ($pcts | length) > 0 then ($pcts | add / length) else 0 end
          ')
        else
          CHANGED_STMTS="N/A"
          CHANGED_BRANCHES="N/A"
          CHANGED_FUNCS="N/A"
          CHANGED_LINES="N/A"
        fi
        
        # Create coverage report
        cat > coverage-report.md << EOF
        ## 📊 Test Coverage Report
        
        | Metric | Current | Changed Files |
        |--------|---------|---------------|
        | Statements | ${CURRENT_STMTS}% | ${CHANGED_STMTS}$([ "$CHANGED_STMTS" != "N/A" ] && echo "%") |
        | Branches | ${CURRENT_BRANCHES}% | ${CHANGED_BRANCHES}$([ "$CHANGED_BRANCHES" != "N/A" ] && echo "%") |
        | Functions | ${CURRENT_FUNCS}% | ${CHANGED_FUNCS}$([ "$CHANGED_FUNCS" != "N/A" ] && echo "%") |
        | Lines | ${CURRENT_LINES}% | ${CHANGED_LINES}$([ "$CHANGED_LINES" != "N/A" ] && echo "%") |
        
        **Current**: Overall project coverage  
        **Changed Files**: Coverage of files modified in this PR
        $(if [ "$CHANGED_LINES" = "N/A" ]; then echo "📝 **No source files changed**"; else echo "📊 **Changed files coverage**: ${CHANGED_LINES}%"; fi)
        EOF
        
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverageReport = fs.readFileSync('coverage-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageReport
          });
