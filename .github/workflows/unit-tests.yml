name: Unit Tests

on:
  pull_request:
    branches: [ main ]

env:
  NODE_ENV: test

jobs:
  unit-tests:
    name: Run Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Setup test environment variables
      run: |
        echo "NODE_ENV=test" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_URL=https://test.supabase.co" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=test-key" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=test-service-key" >> $GITHUB_ENV
        echo "JWT_ACCESS_SECRET=test-access-secret-that-is-at-least-32-characters-long" >> $GITHUB_ENV
        echo "JWT_REFRESH_SECRET=test-refresh-secret-that-is-at-least-32-characters-long-and-different" >> $GITHUB_ENV
      
    - name: Run unit tests with coverage
      run: npm test -- --passWithNoTests --verbose --coverage
      
    - name: Generate coverage report
      run: |
        # Get base coverage (main branch)
        git fetch origin main
        git checkout ${{ github.event.pull_request.base.sha }}
        npm test -- --coverage --silent > /dev/null 2>&1 || echo "No tests on base branch"
        if [ -f coverage/coverage-summary.json ]; then
          BASE_COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
        else
          BASE_COVERAGE=0
        fi
        echo "BASE_COVERAGE=$BASE_COVERAGE" >> $GITHUB_ENV
        
        # Get current coverage (PR branch)
        git checkout ${{ github.event.pull_request.head.sha }}
        npm test -- --coverage --silent > /dev/null 2>&1
        CURRENT_COVERAGE=$(cat coverage/coverage-summary.json | jq -r '.total.lines.pct // 0')
        echo "CURRENT_COVERAGE=$CURRENT_COVERAGE" >> $GITHUB_ENV
        
        # Calculate difference
        DIFF=$(echo "$CURRENT_COVERAGE - $BASE_COVERAGE" | bc -l)
        echo "COVERAGE_DIFF=$DIFF" >> $GITHUB_ENV
        
        # Create coverage report
        cat > coverage-report.md << EOF
        ## 📊 Coverage Report
        
        | Metric | Before | After | Change |
        |--------|--------|-------|--------|
        | Lines | ${BASE_COVERAGE}% | ${CURRENT_COVERAGE}% | ${DIFF:0:5}% |
        
        $(if (( $(echo "$DIFF > 0" | bc -l) )); then echo "✅ **Coverage increased!** 📈"; elif (( $(echo "$DIFF < 0" | bc -l) )); then echo "⚠️ **Coverage decreased** 📉"; else echo "📊 **Coverage unchanged**"; fi)
        
        ### Coverage Details:
        \`\`\`
        $(npm test -- --coverage --silent | grep -A 10 "File.*% Stmts.*% Branch" | head -10)
        \`\`\`
        EOF
        
    - name: Comment PR with coverage
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const coverageReport = fs.readFileSync('coverage-report.md', 'utf8');
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: coverageReport
          });