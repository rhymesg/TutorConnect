name: Navigation E2E Test

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

env:
  NODE_ENV: production

permissions:
  contents: read
  pull-requests: write

jobs:
  navigation-test:
    name: Test Navigation Flow
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 20
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci --include=dev
      
    - name: Setup environment
      run: |
        echo "NEXT_PUBLIC_SUPABASE_URL=${{ secrets.NEXT_PUBLIC_SUPABASE_URL }}" >> $GITHUB_ENV
        echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=${{ secrets.NEXT_PUBLIC_SUPABASE_ANON_KEY }}" >> $GITHUB_ENV
        echo "SUPABASE_SERVICE_ROLE_KEY=${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}" >> $GITHUB_ENV
        echo "JWT_ACCESS_SECRET=${{ secrets.JWT_ACCESS_SECRET }}" >> $GITHUB_ENV
        echo "JWT_REFRESH_SECRET=${{ secrets.JWT_REFRESH_SECRET }}" >> $GITHUB_ENV
        echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" >> $GITHUB_ENV
        
    - name: Build application
      run: npm run build
      
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
      
    - name: Start application
      run: |
        npm run start &
        sleep 10
        curl --retry 10 --retry-delay 5 --retry-connrefused http://localhost:3000
      
    - name: Run navigation E2E test
      run: |
        cat > playwright-navigation.config.ts << 'EOF'
        import { defineConfig } from '@playwright/test';

        export default defineConfig({
          testDir: './tests/e2e',
          timeout: 30000,
          expect: { timeout: 5000 },
          fullyParallel: false,
          forbidOnly: !!process.env.CI,
          retries: process.env.CI ? 2 : 0,
          workers: 1,
          reporter: 'html',
          use: {
            baseURL: 'http://localhost:3000',
            trace: 'on-first-retry',
            screenshot: 'only-on-failure',
          },
          projects: [
            {
              name: 'chromium',
              use: { browserName: 'chromium' },
            },
          ],
        });
        EOF
        
        mkdir -p tests/e2e
        cat > tests/e2e/navigation.test.ts << 'EOF'
        import { test, expect } from '@playwright/test';

        test.describe('Navigation Flow', () => {
          test('should navigate to register page from various buttons and links', async ({ page }) => {
            // Test 1: Header "Registrer deg" link
            await page.goto('/');
            
            // Check that we're on the home page
            await expect(page).toHaveURL('/');
            await expect(page.locator('h1')).toContainText('Finn din perfekte');
            
            // Click "Registrer deg" in header
            await page.click('a:has-text("Registrer deg")');
            await expect(page).toHaveURL('/auth/register');
            await expect(page.locator('h2:has-text("Opprett konto")')).toBeVisible();
            
            console.log('✅ Header "Registrer deg" navigation works');
            
            // Test 2: CTA section "Opprett konto" link
            await page.goto('/');
            
            // Scroll to CTA section and click "Opprett konto"
            await page.locator('a:has-text("Opprett konto")').scrollIntoViewIfNeeded();
            await page.click('a:has-text("Opprett konto")');
            await expect(page).toHaveURL('/auth/register');
            await expect(page.locator('h2:has-text("Opprett konto")')).toBeVisible();
            
            console.log('✅ CTA "Opprett konto" navigation works');
            
            // Test 3: Hero section "Start som lærer" button
            await page.goto('/');
            
            await page.click('a:has-text("Start som lærer")');
            await expect(page).toHaveURL('/auth/register?type=teacher');
            await expect(page.locator('h2:has-text("Opprett konto")')).toBeVisible();
            
            console.log('✅ Hero "Start som lærer" navigation works');
            
            // Test 4: Hero section "Finn en lærer" button
            await page.goto('/');
            
            await page.click('a:has-text("Finn en lærer")');
            await expect(page).toHaveURL('/posts?type=teacher');
            
            console.log('✅ Hero "Finn en lærer" navigation works');
            
            // Test 5: Check that register page actually loads properly
            await page.goto('/auth/register');
            
            // Check that all key elements are present
            await expect(page.locator('h2:has-text("Opprett konto")')).toBeVisible();
            await expect(page.locator('input[name="name"]')).toBeVisible();
            await expect(page.locator('input[name="email"]')).toBeVisible();
            await expect(page.locator('input[name="password"]')).toBeVisible();
            await expect(page.locator('button[type="submit"]')).toBeVisible();
            
            console.log('✅ Register page loads completely');
            
            // Test 4: Check "Logg inn her" link back to login
            await page.click('a:has-text("Logg inn her")');
            await expect(page).toHaveURL('/auth/login');
            await expect(page.locator('h2:has-text("Logg inn")')).toBeVisible();
            
            console.log('✅ "Logg inn her" navigation works');
            
            // Test 5: Check breadcrumb navigation (if exists)
            await page.goto('/auth/register');
            
            // Try clicking TutorConnect logo to go back home
            await page.click('a[aria-label*="forsiden"], a:has-text("TutorConnect")');
            await expect(page).toHaveURL('/');
            await expect(page.locator('h1')).toContainText('Finn din perfekte');
            
            console.log('✅ Logo navigation back to home works');
            
            console.log('✅ All navigation tests passed');
          });
        });
        EOF
        
        npx playwright test --config=playwright-navigation.config.ts
      
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-navigation-report
        path: playwright-report/
        retention-days: 30